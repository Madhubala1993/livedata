import "./App.css";
import Box from "@mui/material/Box";
import Modal from "@mui/material/Modal";
import { useCallback, useEffect, useRef, useState } from "react";
import CancelIcon from "@mui/icons-material/Cancel";
import Button from "@mui/material/Button";
import ReactCrop from "react-image-crop";
import "react-image-crop/dist/ReactCrop.css";
import { API } from "./global";

const style = {
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  bgcolor: "background.paper",
  borderRadius: "5px",
  boxShadow: 24,
};

export default function App() {
  const [boxSize, setBoxSize] = useState(null);

  const getFixValues = () => {
    fetch(`${API}/status`, {
      method: "GET",
    })
      .then((data) => data.json())
      .then((values) => setBoxSize(values));
  };
  useEffect(getFixValues, []);

  return boxSize ? (
    <Status boxSize={boxSize} setBoxSize={setBoxSize} />
  ) : (
    <h1>Loading...</h1>
  );
}
function Status({ boxSize, setBoxSize }) {
  const [open, setOpen] = useState(false);
  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);

  return (
    <div className="App">
      <div className="nytt-container">
        <img
          className="nytt-logo"
          src="https://nyttdev.com/testing_env/version4/assets/img/app_logo_orange.png"
          alt="NYTT"
        />
        <button className="live-status" onClick={handleOpen}>
          Live Status
        </button>
        <Modal
          open={open}
          aria-labelledby="modal-modal-title"
          aria-describedby="modal-modal-description"
          className="modalbox"
        >
          <Box sx={style} className="modal-container">
            <div className="header">
              <p className="title">Live Detection</p>
              <Button
                sx={{
                  marginLeft: "auto",
                  textAlign: "center",
                  color: "red",
                }}
                onClick={handleClose}
              >
                <CancelIcon />
              </Button>
            </div>
            <div className="modal-content">
              <div className="actions">
                <p style={{ padding: "10px" }}>Machine50</p>
                <div
                  className="buttons"
                  style={{
                    marginLeft: "auto",
                    display: "flex",
                    gap: "20px",
                    padding: "10px",
                  }}
                >
                  <button className="edit-button">Edit detection</button>
                  <button className="save-button">Sync to SetApp</button>
                </div>
              </div>

              <CropDemo setBoxSize={setBoxSize} boxSize={boxSize} />
            </div>
          </Box>
        </Modal>
      </div>
    </div>
  );
}

function CropDemo({ setBoxSize, boxSize }) {
  console.log("boxSize", boxSize);
  const addFixValues = (values) => {
    fetch(`${API}/status`, {
      method: "POST",
      body: JSON.stringify(values),
      headers: { "Content-Type": "application/json" },
    })
      .then((data) => data.json())
      .then((value) => setBoxSize(value[0]));
  };

  const [crop, setCrop] = useState(boxSize[0]);

  const onComplete = useCallback((croppedArea, croppedAreaPixels) => {
    for (var key of Object.keys(croppedArea)) {
      if (typeof croppedArea[key] === "number" && croppedArea[key] !== 0) {
        croppedArea[key] = Math.ceil(croppedArea[key]);
      }
    }
    console.log("croppedArea", croppedArea);
    addFixValues(croppedArea);
  }, []);
  return (
    <div>
      <ReactCrop
        crop={crop}
        style={{ border: "20px" }}
        onChange={(c) => setCrop(c)}
        onComplete={onComplete}
        keepSelection="false"
        className="crop-container"
      >
        <img className="error-image" src="Error_1.png" />
      </ReactCrop>
    </div>
  );
}

function Display({ crop }) {
  console.log(crop);
  let { x, y, width, height } = crop[0];
  console.log(x, y, width, height);
  return <p>{x}</p>;
}
